// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartMarket.Data.DbContexts;

#nullable disable

namespace SmartMarket.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240624174047_elevenqstawhMigration")]
    partial class elevenqstawhMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartMarket.Domin.Entities.Cards.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CasherId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<long>("KassaId")
                        .HasColumnType("bigint");

                    b.Property<int>("OlchovBirligi")
                        .HasColumnType("integer");

                    b.Property<string>("PCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TolovUsulId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("TransNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("YukTaxlovchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YukYiguvchId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CasherId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("KassaId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TolovUsulId");

                    b.HasIndex("YukTaxlovchId");

                    b.HasIndex("YukYiguvchId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Cards.Korzinka", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("OlchovBirligi")
                        .HasColumnType("integer");

                    b.Property<string>("PCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TolovUsulId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("TransNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("YukTaxlovchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YukYiguvchId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TolovUsulId");

                    b.HasIndex("YukTaxlovchId");

                    b.HasIndex("YukYiguvchId");

                    b.ToTable("Korzinkas");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Categories.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.CencelOrders.CencelOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Action")
                        .HasColumnType("boolean");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CancelerCasherId")
                        .HasColumnType("bigint");

                    b.Property<long>("CasherId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("OlchovTuri")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("TransNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CancelerCasherId");

                    b.HasIndex("CasherId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CancelOrders");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.ContrAgents.ContrAgent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Dept")
                        .HasColumnType("numeric");

                    b.Property<string>("Firma")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("LastPaid")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PayForDept")
                        .HasColumnType("numeric");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TolovUsuliID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TolovUsuliID");

                    b.ToTable("ContrAgents");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.ContrAgents.Tolov", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContrAgentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LastPaid")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContrAgentId");

                    b.ToTable("Tolovs");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Kassas.Kassa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Kassas");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Orders.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OlchovTuri")
                        .HasColumnType("integer");

                    b.Property<string>("PCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("TransNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("YiguvchId")
                        .HasColumnType("bigint");

                    b.Property<long>("YukTaxlovchId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("YiguvchId");

                    b.HasIndex("YukTaxlovchId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Partners.Partner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Debt")
                        .HasColumnType("numeric");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Paid")
                        .HasColumnType("numeric");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TolovUsuliId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TolovUsuliId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Partners.PartnerProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric");

                    b.Property<long>("KassaId")
                        .HasColumnType("bigint");

                    b.Property<int>("OlchovBirligi")
                        .HasColumnType("integer");

                    b.Property<string>("PCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TolovUsuliId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("TransNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YukTaxlovchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YukYiguvchId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("KassaId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TolovUsuliId");

                    b.HasIndex("UserId");

                    b.HasIndex("YukTaxlovchId");

                    b.HasIndex("YukYiguvchId");

                    b.ToTable("PartnerProducts");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Partners.PartnerTolov", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LastPaid")
                        .HasColumnType("numeric");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerTolovs");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Action")
                        .HasColumnType("boolean");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CamePrice")
                        .HasColumnType("numeric");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContrAgentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OlchovTuri")
                        .HasColumnType("integer");

                    b.Property<string>("PCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("PercentageOfPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContrAgentId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Products.ProductStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Action")
                        .HasColumnType("boolean");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CamePrice")
                        .HasColumnType("numeric");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContrAgentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OlchovTuri")
                        .HasColumnType("integer");

                    b.Property<string>("PCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("PercentageOfPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContrAgentId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductStory");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Tolovs.TolovUsuli", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Karta")
                        .HasColumnType("numeric");

                    b.Property<long>("KassaId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Naqt")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Nasiya")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PulKochirish")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("KassaId");

                    b.HasIndex("UserId");

                    b.ToTable("TolovUsulis");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Users.WorkersPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("OlganPuli")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Oylik")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("QolganPuli")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkersPayment");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Cards.Card", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "Casher")
                        .WithMany("CasherCards")
                        .HasForeignKey("CasherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Categories.Category", "Category")
                        .WithMany("Cards")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Kassas.Kassa", "Kassa")
                        .WithMany("Cards")
                        .HasForeignKey("KassaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Partners.Partner", "Partner")
                        .WithMany("Cards")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartMarket.Domin.Entities.Tolovs.TolovUsuli", "TolovUsuli")
                        .WithMany("Cards")
                        .HasForeignKey("TolovUsulId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "YukTaxlovchi")
                        .WithMany("YukTaxlovchisi")
                        .HasForeignKey("YukTaxlovchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "Yiguvchi")
                        .WithMany("YiguvchiCards")
                        .HasForeignKey("YukYiguvchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Casher");

                    b.Navigation("Category");

                    b.Navigation("Kassa");

                    b.Navigation("Partner");

                    b.Navigation("TolovUsuli");

                    b.Navigation("Yiguvchi");

                    b.Navigation("YukTaxlovchi");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Cards.Korzinka", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Partners.Partner", "Partner")
                        .WithMany("Korzinkas")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartMarket.Domin.Entities.Tolovs.TolovUsuli", "TolovUsuli")
                        .WithMany("Korzinkas")
                        .HasForeignKey("TolovUsulId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "YukTaxlovchi")
                        .WithMany("Taxlovchi")
                        .HasForeignKey("YukTaxlovchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "Yiguvchi")
                        .WithMany("Yiguvchi")
                        .HasForeignKey("YukYiguvchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Partner");

                    b.Navigation("TolovUsuli");

                    b.Navigation("Yiguvchi");

                    b.Navigation("YukTaxlovchi");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.CencelOrders.CencelOrder", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "CencelerCasher")
                        .WithMany()
                        .HasForeignKey("CancelerCasherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "Casher")
                        .WithMany("CencelOrders")
                        .HasForeignKey("CasherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Categories.Category", "Category")
                        .WithMany("CencelOrders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Casher");

                    b.Navigation("Category");

                    b.Navigation("CencelerCasher");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.ContrAgents.ContrAgent", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Tolovs.TolovUsuli", "TolovUsuli")
                        .WithMany("ContrAgents")
                        .HasForeignKey("TolovUsuliID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TolovUsuli");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.ContrAgents.Tolov", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.ContrAgents.ContrAgent", "ContrAgent")
                        .WithMany("Tolovs")
                        .HasForeignKey("ContrAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContrAgent");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Orders.Order", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Categories.Category", "Category")
                        .WithMany("Orders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Partners.Partner", "Partner")
                        .WithMany("Orders")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "Yiguvchi")
                        .WithMany("YukYiguvchi")
                        .HasForeignKey("YiguvchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "YukTaxlovchi")
                        .WithMany("YukTaxlovchi")
                        .HasForeignKey("YukTaxlovchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Partner");

                    b.Navigation("Yiguvchi");

                    b.Navigation("YukTaxlovchi");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Partners.Partner", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Tolovs.TolovUsuli", "TolovUsuli")
                        .WithMany("Partners")
                        .HasForeignKey("TolovUsuliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TolovUsuli");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Partners.PartnerProduct", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Categories.Category", "Category")
                        .WithMany("PartnersProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Kassas.Kassa", "Kassa")
                        .WithMany("PartnerProducts")
                        .HasForeignKey("KassaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Partners.Partner", "Partner")
                        .WithMany("PartnerProducts")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartMarket.Domin.Entities.Tolovs.TolovUsuli", "TolovUsuli")
                        .WithMany("PartnersProduct")
                        .HasForeignKey("TolovUsuliId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "User")
                        .WithMany("PartnerProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "YukTaxlovchi")
                        .WithMany("PartnersYukTaxlovchisi")
                        .HasForeignKey("YukTaxlovchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "Yiguvchi")
                        .WithMany("PartnersYukYiguvchi")
                        .HasForeignKey("YukYiguvchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Kassa");

                    b.Navigation("Partner");

                    b.Navigation("TolovUsuli");

                    b.Navigation("User");

                    b.Navigation("Yiguvchi");

                    b.Navigation("YukTaxlovchi");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Partners.PartnerTolov", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Partners.Partner", "Partner")
                        .WithMany("PartnerTolovs")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Products.Product", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Categories.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.ContrAgents.ContrAgent", "ContrAgent")
                        .WithMany("Products")
                        .HasForeignKey("ContrAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ContrAgent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Products.ProductStory", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Categories.Category", "Category")
                        .WithMany("ProductStory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.ContrAgents.ContrAgent", "ContrAgent")
                        .WithMany("ProductStory")
                        .HasForeignKey("ContrAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "User")
                        .WithMany("ProductStory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ContrAgent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Tolovs.TolovUsuli", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Kassas.Kassa", "Kassa")
                        .WithMany("Tolovs")
                        .HasForeignKey("KassaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domin.Entities.Users.User", null)
                        .WithMany("TolovUsulis")
                        .HasForeignKey("UserId");

                    b.Navigation("Kassa");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Users.WorkersPayment", b =>
                {
                    b.HasOne("SmartMarket.Domin.Entities.Users.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Categories.Category", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("CencelOrders");

                    b.Navigation("Orders");

                    b.Navigation("PartnersProducts");

                    b.Navigation("ProductStory");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.ContrAgents.ContrAgent", b =>
                {
                    b.Navigation("ProductStory");

                    b.Navigation("Products");

                    b.Navigation("Tolovs");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Kassas.Kassa", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("PartnerProducts");

                    b.Navigation("Tolovs");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Partners.Partner", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Korzinkas");

                    b.Navigation("Orders");

                    b.Navigation("PartnerProducts");

                    b.Navigation("PartnerTolovs");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Tolovs.TolovUsuli", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("ContrAgents");

                    b.Navigation("Korzinkas");

                    b.Navigation("Partners");

                    b.Navigation("PartnersProduct");
                });

            modelBuilder.Entity("SmartMarket.Domin.Entities.Users.User", b =>
                {
                    b.Navigation("CasherCards");

                    b.Navigation("CencelOrders");

                    b.Navigation("PartnerProducts");

                    b.Navigation("PartnersYukTaxlovchisi");

                    b.Navigation("PartnersYukYiguvchi");

                    b.Navigation("Payments");

                    b.Navigation("ProductStory");

                    b.Navigation("Products");

                    b.Navigation("Taxlovchi");

                    b.Navigation("TolovUsulis");

                    b.Navigation("Yiguvchi");

                    b.Navigation("YiguvchiCards");

                    b.Navigation("YukTaxlovchi");

                    b.Navigation("YukTaxlovchisi");

                    b.Navigation("YukYiguvchi");
                });
#pragma warning restore 612, 618
        }
    }
}
